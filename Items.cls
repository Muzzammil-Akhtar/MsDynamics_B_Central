//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class Items {

	public class Value {
		public String odata_etag {get;set;} // in json: @odata.etag
		public String id {get;set;} 
		public String number_Z {get;set;} // in json: number
		public String displayName {get;set;} 
		public String type {get;set;} 
		public String itemCategoryId {get;set;} 
		public String itemCategoryCode {get;set;} 
		public Boolean blocked {get;set;} 
		public String gtin {get;set;} 
		public Integer inventory {get;set;} 
		public Double unitPrice {get;set;} 
		public Boolean priceIncludesTax {get;set;} 
		public Double unitCost {get;set;} 
		public String taxGroupId {get;set;} 
		public String taxGroupCode {get;set;} 
		public String baseUnitOfMeasureId {get;set;} 
		public String baseUnitOfMeasureCode {get;set;} 
		public String lastModifiedDateTime {get;set;} 

		public Value(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '@odata.etag') {
							odata_etag = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'number') {
							number_Z = parser.getText();
						} else if (text == 'displayName') {
							displayName = parser.getText();
						} else if (text == 'type') {
							type = parser.getText();
						} else if (text == 'itemCategoryId') {
							itemCategoryId = parser.getText();
						} else if (text == 'itemCategoryCode') {
							itemCategoryCode = parser.getText();
						} else if (text == 'blocked') {
							blocked = parser.getBooleanValue();
						} else if (text == 'gtin') {
							gtin = parser.getText();
						} else if (text == 'inventory') {
							inventory = parser.getIntegerValue();
						} else if (text == 'unitPrice') {
							unitPrice = parser.getIntegerValue();
						} else if (text == 'priceIncludesTax') {
							priceIncludesTax = parser.getBooleanValue();
						} else if (text == 'unitCost') {
							unitCost = parser.getIntegerValue();
						} else if (text == 'taxGroupId') {
							taxGroupId = parser.getText();
						} else if (text == 'taxGroupCode') {
							taxGroupCode = parser.getText();
						} else if (text == 'baseUnitOfMeasureId') {
							baseUnitOfMeasureId = parser.getText();
						} else if (text == 'baseUnitOfMeasureCode') {
							baseUnitOfMeasureCode = parser.getText();
						} else if (text == 'lastModifiedDateTime') {
							lastModifiedDateTime = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Value consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String odata_context {get;set;} // in json: @odata.context
	public List<Value> value {get;set;} 

	public Items(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == '@odata.context') {
						odata_context = parser.getText();
					} else if (text == 'value') {
						value = arrayOfValue(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'Items consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static Items parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new Items(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<Value> arrayOfValue(System.JSONParser p) {
        List<Value> res = new List<Value>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Value(p));
        }
        return res;
    }

}