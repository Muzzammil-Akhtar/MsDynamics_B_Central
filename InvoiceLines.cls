//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class InvoiceLines {
	public String odata_context {get;set;} // in json: @odata.context
	public List<Value> value {get;set;} 

	public class Value {
		public String odata_etag {get;set;} // in json: @odata.etag
		public String id {get;set;} 
		public String documentId {get;set;} 
		public Integer sequence {get;set;} 
		public String itemId {get;set;} 
		public String accountId {get;set;} 
		public String lineType {get;set;} 
		public String lineObjectNumber {get;set;} 
		public String description {get;set;} 
		public String unitOfMeasureId {get;set;} 
		public String unitOfMeasureCode {get;set;} 
		public Double unitPrice {get;set;} 
		public Integer quantity {get;set;} 
		public Integer discountAmount {get;set;} 
		public Integer discountPercent {get;set;} 
		public Boolean discountAppliedBeforeTax {get;set;} 
		public Double amountExcludingTax {get;set;} 
		public String taxCode {get;set;} 
		public String taxPercent {get;set;} 
		public Double totalTaxAmount {get;set;} 
		public Double amountIncludingTax {get;set;} 
		public Integer invoiceDiscountAllocation {get;set;} 
		public Double netAmount {get;set;} 
		public Double netTaxAmount {get;set;} 
		public Double netAmountIncludingTax {get;set;} 
		public String shipmentDate {get;set;} 
		public String itemVariantId {get;set;} 
		public String locationId {get;set;} 

		public Value(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '@odata.etag') {
							odata_etag = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'documentId') {
							documentId = parser.getText();
						} else if (text == 'sequence') {
							sequence = parser.getIntegerValue();
						} else if (text == 'itemId') {
							itemId = parser.getText();
						} else if (text == 'accountId') {
							accountId = parser.getText();
						} else if (text == 'lineType') {
							lineType = parser.getText();
						} else if (text == 'lineObjectNumber') {
							lineObjectNumber = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'unitOfMeasureId') {
							unitOfMeasureId = parser.getText();
						} else if (text == 'unitOfMeasureCode') {
							unitOfMeasureCode = parser.getText();
						} else if (text == 'unitPrice') {
							unitPrice = parser.getDoubleValue();
						} else if (text == 'quantity') {
							quantity = parser.getIntegerValue();
						} else if (text == 'discountAmount') {
							discountAmount = parser.getIntegerValue();
						} else if (text == 'discountPercent') {
							discountPercent = parser.getIntegerValue();
						} else if (text == 'discountAppliedBeforeTax') {
							discountAppliedBeforeTax = parser.getBooleanValue();
						} else if (text == 'amountExcludingTax') {
							amountExcludingTax = parser.getDoubleValue();
						} else if (text == 'taxCode') {
							taxCode = parser.getText();
						} else if (text == 'taxPercent') {
							taxPercent = parser.getText();
						} else if (text == 'totalTaxAmount') {
							totalTaxAmount = parser.getDoubleValue();
						} else if (text == 'amountIncludingTax') {
							amountIncludingTax = parser.getDoubleValue();
						} else if (text == 'invoiceDiscountAllocation') {
							invoiceDiscountAllocation = parser.getIntegerValue();
						} else if (text == 'netAmount') {
							netAmount = parser.getDoubleValue();
						} else if (text == 'netTaxAmount') {
							netTaxAmount = parser.getDoubleValue();
						} else if (text == 'netAmountIncludingTax') {
							netAmountIncludingTax = parser.getDoubleValue();
						} else if (text == 'shipmentDate') {
							shipmentDate = parser.getText();
						} else if (text == 'itemVariantId') {
							itemVariantId = parser.getText();
						} else if (text == 'locationId') {
							locationId = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Value consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static InvoiceLines parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new InvoiceLines(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

	public InvoiceLines(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == '@odata.context') {
						odata_context = parser.getText();
					} else if (text == 'value') {
						value = arrayOfValue(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
    private static List<Value> arrayOfValue(System.JSONParser p) {
        List<Value> res = new List<Value>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Value(p));
        }
        return res;
    }



}