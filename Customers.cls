//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class Customers {

	
	public class Value {
		public String odata_etag {get;set;} // in json: @odata.etag 
		public String id {get;set;} 
		public String number_Z {get;set;} // in json: number
		public String displayName {get;set;} 
		public String type {get;set;} 
		public String addressLine1 {get;set;} 
		public String addressLine2 {get;set;} 
		public String city {get;set;} 
		public String state {get;set;} 
		public String country {get;set;} 
		public String postalCode {get;set;} 
		public String phoneNumber {get;set;} 
		public String email {get;set;} 
		public String website {get;set;} 
		public Boolean taxLiable {get;set;} 
		public String taxAreaId {get;set;} 
		public String taxAreaDisplayName {get;set;} 
		public String taxRegistrationNumber {get;set;} 
		public String currencyId {get;set;} 
		public String currencyCode {get;set;} 
		public String paymentTermsId {get;set;} 
		public String shipmentMethodId {get;set;} 
		public String paymentMethodId {get;set;} 
		public String blocked {get;set;} 
		public Datetime lastModifiedDateTime {get;set;} 
		
		public Value(String accNumber,
					 String accName,
					 String addressLine1,
					 String addressLine2,
					 String 	city,
					 String 	state,
					 String 	country,
					 String 	postalCode,
					 String 	phoneNumber,
					 String 	website){	
			this.number_Z = accNumber;
			this.displayName = accName;
			//this.addressLine1 = addressLine1;
			this.phoneNumber = phoneNumber;
			this.website = Website;
			this.type = 'Company';

		}
			

		public Value(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '@odata.etag') {
							odata_etag = parser.getText(); 
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'number') {
							number_Z = parser.getText();
						} else if (text == 'displayName') {
							displayName = parser.getText();
						} else if (text == 'type') {
							type = parser.getText();
						} else if (text == 'addressLine1') {
							addressLine1 = parser.getText();
						} else if (text == 'addressLine2') {
							addressLine2 = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'postalCode') {
							postalCode = parser.getText();
						} else if (text == 'phoneNumber') {
							phoneNumber = parser.getText();
						} else if (text == 'email') {
							email = parser.getText();
						} else if (text == 'website') {
							website = parser.getText();
						} else if (text == 'taxLiable') {
							taxLiable = parser.getBooleanValue();
						} else if (text == 'taxAreaId') {
							taxAreaId = parser.getText();
						} else if (text == 'taxAreaDisplayName') {
							taxAreaDisplayName = parser.getText();
						} else if (text == 'taxRegistrationNumber') {
							taxRegistrationNumber = parser.getText();
						} else if (text == 'currencyId') {
							currencyId = parser.getText();
						} else if (text == 'currencyCode') {
							currencyCode = parser.getText();
						} else if (text == 'paymentTermsId') {
							paymentTermsId = parser.getText();
						} else if (text == 'shipmentMethodId') {
							shipmentMethodId = parser.getText();
						} else if (text == 'paymentMethodId') {
							paymentMethodId = parser.getText();
						} else if (text == 'blocked') {
							blocked = parser.getText();
						} else if (text == 'lastModifiedDateTime') {
							lastModifiedDateTime = parser.getDatetimeValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Value consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public String odata_context {get;set;} // in json: @odata.context 
	public List<Value> value {get;set;} 

	public Customers(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == '@odata.context') {
						odata_context = parser.getText();
					} else if (text == 'value') {
						value = arrayOfValue(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'Customers consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}

	
	
	public static Customers parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new Customers(parser);
	}
	

	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<Value> arrayOfValue(System.JSONParser p) {
        List<Value> res = new List<Value>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Value(p));
        }
        return res;
    }
    

	
}