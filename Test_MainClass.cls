@isTest//(SeeAllData=true)
public class Test_MainClass {
    @isTest static void accountPostTest(){
        MainClass_Salesforce_2_MsDynamic.push_Accounts();
    }
    
    @isTest static Void accountGetTest(){
        string epurl = 'callout:Dynamics_365_BC/v1.0/8dd65afe-0467-41c9-aca7-542d293d0413/api/v2.0/customers?company=CRONUS%20Canada%2C%20Inc.&$filter=%20lastModifiedDateTime%20ge%202021-09-06T12:22:42Z';
        Test.setMock(HTTPCalloutMock.class, new MockCallOut());
        HTTPResponse result= Api_CallOut_Class.makeRequest(epurl,'GET', null);
        
        System.assertNotEquals(null,result, 'The callout returned a null response.');
        System.assertEquals(200,result.getStatusCode(), 'The status code is not 200.');
        //System.assertEquals('application/json;charset=UTF-8', result.getHeader('Content-type'),'The content type value is not expected.');
        MainClass_Salesforce_2_MsDynamic.get_Accounts();
        
    }

    @isTest static Void productGetTest(){
        string epurl = 'callout:Dynamics_365_BC/v1.0/8dd65afe-0467-41c9-aca7-542d293d0413/api/v2.0/products?company=CRONUS%20Canada%2C%20Inc.&$filter=%20lastModifiedDateTime%20ge%202021-09-06T12:22:42Z';
        Test.setMock(HTTPCalloutMock.class, new MockCallOut());
        HTTPResponse result= Api_CallOut_Class.makeRequest(epurl,'GET', null);
        
        System.assertNotEquals(null,result, 'The callout returned a null response.');
        System.assertEquals(200,result.getStatusCode(), 'The status code is not 200.');
        //System.assertEquals('application/json;charset=UTF-8', result.getHeader('Content-type'),'The content type value is not expected.');
        MainClass_Salesforce_2_MsDynamic.get_Products();
        
    }
    
    @isTest static Void salesOrderGetTest(){
        string epurl  = 'callout:Dynamics_365_BC/v1.0/8dd65afe-0467-41c9-aca7-542d293d0413/api/v2.0/salesOrders?company=CRONUS%20Canada%2C%20Inc.&$filter=%20lastModifiedDateTime%20ge%202021-09-06T12:22:42Z';
        Test.setMock(HTTPCalloutMock.class, new MockCallOut());
        HTTPResponse result= Api_CallOut_Class.makeRequest(epurl,'GET', null);
        
        System.assertNotEquals(null,result, 'The callout returned a null response.');
        System.assertEquals(200,result.getStatusCode(), 'The status code is not 200.');
        //System.assertEquals('application/json;charset=UTF-8', result.getHeader('Content-type'),'The content type value is not expected.');
        try{
            MainClass_Salesforce_2_MsDynamic.get_SalesOrders();
        }
        catch(Exception e){
            system.debug('error from test class :: ' + e.getMessage());
        }    
        
    }
    
    @isTest static Void salesInvoicesGetTest(){
        string epurl = 'callout:Dynamics_365_BC/v1.0/8dd65afe-0467-41c9-aca7-542d293d0413/api/v2.0/salesInvoices?company=CRONUS%20Canada%2C%20Inc.&$filter=%20lastModifiedDateTime%20ge%202021-09-06T12:22:42Z';
        Test.setMock(HTTPCalloutMock.class, new MockCallOut());
        HTTPResponse result= Api_CallOut_Class.makeRequest(epurl,'GET', null);
        
        System.assertNotEquals(null,result, 'The callout returned a null response.');
        System.assertEquals(200,result.getStatusCode(), 'The status code is not 200.');
        //System.assertEquals('application/json;charset=UTF-8', result.getHeader('Content-type'),'The content type value is not expected.');
        MainClass_Salesforce_2_MsDynamic.get_SalesInvoices();
        
    }
    
    @isTest static Void salesMemosGetTest(){
        string epurl = '';
        Test.setMock(HTTPCalloutMock.class, new MockCallOut());
        HTTPResponse result= Api_CallOut_Class.makeRequest(epurl,'GET', null);
        
        System.assertNotEquals(null,result, 'The callout returned a null response.');
        System.assertEquals(200,result.getStatusCode(), 'The status code is not 200.');
        //System.assertEquals('application/json;charset=UTF-8', result.getHeader('Content-type'),'The content type value is not expected.');
        MainClass_Salesforce_2_MsDynamic.get_SalesMemo();
        
    }
    
    
    // Generated by JSON2Apex http://json2apex.herokuapp.com/
    // This test method should give 100% coverage
	static testMethod void testParseCustomers() {
		String json = '{\"@odata.context\":\"https://api.businesscentral.dynamics.com/v2.0/862c2ab7-4751-4c34-bc37-13deffb5515d/Sandbox1/api/v2.0/$metadata#customers\",\"value\":[{\"@odata.etag\":\"W/\\\"JzQ0O2RiNzZJbHFDVDFpTnlVN2R6NVhCMjk3Z0lzdDlqZlRsZEluek1nMFgvQ2c9MTswMDsn\\\"\",\"id\":\"2321a77b-a6cd-eb11-9f0a-000d3ae8d14e\",\"number\":\"10002\",\"displayName\":\"Muzzammil & Sons\",\"type\":\"Company\",\"addressLine1\":\"\",\"addressLine2\":\"\",\"city\":\"\",\"state\":\"\",\"country\":\"US\",\"postalCode\":\"\",\"phoneNumber\":\"\",\"email\":\"\",\"website\":\"\",\"taxLiable\":true,\"taxAreaId\":\"00000000-0000-0000-0000-000000000000\",\"taxAreaDisplayName\":\"\",\"taxRegistrationNumber\":\"\",\"currencyId\":\"00000000-0000-0000-0000-000000000000\",\"currencyCode\":\"CAD\",\"paymentTermsId\":\"1f222249-13a8-eb11-bb60-000d3a2b96dd\",\"shipmentMethodId\":\"00000000-0000-0000-0000-000000000000\",\"paymentMethodId\":\"c2232249-13a8-eb11-bb60-000d3a2b96dd\",\"blocked\":\"_x0020_\",\"lastModifiedDateTime\":\"2021-06-15T06:54:10.567Z\"},{\"@odata.etag\":\"W/\\\"JzQ0O0dMd3hmNjRiNEZESFcxQkRVTEFabFNmMHlpV0FDOHZEcVI4K0dLeFYzaE09MTswMDsn\\\"\",\"id\":\"bff25d07-36c8-eb11-9f0a-000d3ae8dd48\",\"number\":\"C00010\",\"displayName\":\"Test customer 1\",\"type\":\"Company\",\"addressLine1\":\"\",\"addressLine2\":\"\",\"city\":\"Toronto\",\"state\":\"\",\"country\":\"CA\",\"postalCode\":\"\",\"phoneNumber\":\"\",\"email\":\"\",\"website\":\"\",\"taxLiable\":true,\"taxAreaId\":\"00000000-0000-0000-0000-000000000000\",\"taxAreaDisplayName\":\"\",\"taxRegistrationNumber\":\"\",\"currencyId\":\"00000000-0000-0000-0000-000000000000\",\"currencyCode\":\"CAD\",\"paymentTermsId\":\"18222249-13a8-eb11-bb60-000d3a2b96dd\",\"shipmentMethodId\":\"00000000-0000-0000-0000-000000000000\",\"paymentMethodId\":\"be232249-13a8-eb11-bb60-000d3a2b96dd\",\"blocked\":\"_x0020_\",\"lastModifiedDateTime\":\"2021-06-08T11:17:17.63Z\"},{\"@odata.etag\":\"W/\\\"JzQ0O3J3UWhBb2c3THdHOVo0dHhVTVZxK1U4ekdETjNwUUxQT1B2MkFkN3NZa0k9MTswMDsn\\\"\",\"id\":\"81ca6e06-38c8-eb11-9f0a-000d3ae8dd48\",\"number\":\"10000\",\"displayName\":\"Adatum Corporation\",\"type\":\"Company\",\"addressLine1\":\"192 Market Square\",\"addressLine2\":\"\",\"city\":\"Atlanta\",\"state\":\"GA\",\"country\":\"US\",\"postalCode\":\"31772\",\"phoneNumber\":\"\",\"email\":\"robert.townes@contoso.com\",\"website\":\"\",\"taxLiable\":true,\"taxAreaId\":\"00000000-0000-0000-0000-000000000000\",\"taxAreaDisplayName\":\"\",\"taxRegistrationNumber\":\"\",\"currencyId\":\"00000000-0000-0000-0000-000000000000\",\"currencyCode\":\"CAD\",\"paymentTermsId\":\"1f222249-13a8-eb11-bb60-000d3a2b96dd\",\"shipmentMethodId\":\"00000000-0000-0000-0000-000000000000\",\"paymentMethodId\":\"c2232249-13a8-eb11-bb60-000d3a2b96dd\",\"blocked\":\"_x0020_\",\"lastModifiedDateTime\":\"2021-06-08T09:00:52.937Z\"},{\"@odata.etag\":\"W/\\\"JzQ0O0ZrMzIzQ0FhZ1llN1MwN1licEphQ1JqWHR4RG9OTmtja1FRR0tyKzQ4TjA9MTswMDsn\\\"\",\"id\":\"e8b22bfe-38c8-eb11-9f0a-000d3ae8dd48\",\"number\":\"10001\",\"displayName\":\"Test Customer 2\",\"type\":\"Company\",\"addressLine1\":\"\",\"addressLine2\":\"\",\"city\":\"\",\"state\":\"\",\"country\":\"US\",\"postalCode\":\"\",\"phoneNumber\":\"\",\"email\":\"\",\"website\":\"\",\"taxLiable\":true,\"taxAreaId\":\"00000000-0000-0000-0000-000000000000\",\"taxAreaDisplayName\":\"\",\"taxRegistrationNumber\":\"\",\"currencyId\":\"00000000-0000-0000-0000-000000000000\",\"currencyCode\":\"CAD\",\"paymentTermsId\":\"1f222249-13a8-eb11-bb60-000d3a2b96dd\",\"shipmentMethodId\":\"00000000-0000-0000-0000-000000000000\",\"paymentMethodId\":\"c2232249-13a8-eb11-bb60-000d3a2b96dd\",\"blocked\":\"_x0020_\",\"lastModifiedDateTime\":\"2021-06-08T09:07:48.363Z\"}]}';
		Customers r = Customers.parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Customers.Value objValue = new Customers.Value(System.JSON.createParser(json));
		System.assert(objValue != null);
		System.assert(objValue.odata_etag == null);
		System.assert(objValue.id == null);
		System.assert(objValue.number_Z == null);
		System.assert(objValue.displayName == null);
		System.assert(objValue.type == null);
		System.assert(objValue.addressLine1 == null);
		System.assert(objValue.addressLine2 == null);
		System.assert(objValue.city == null);
		System.assert(objValue.state == null);
		System.assert(objValue.country == null);
		System.assert(objValue.postalCode == null);
		System.assert(objValue.phoneNumber == null);
		System.assert(objValue.email == null);
		System.assert(objValue.website == null);
		System.assert(objValue.taxLiable == null);
		System.assert(objValue.taxAreaId == null);
		System.assert(objValue.taxAreaDisplayName == null);
		System.assert(objValue.taxRegistrationNumber == null);
		System.assert(objValue.currencyId == null);
		System.assert(objValue.currencyCode == null);
		System.assert(objValue.paymentTermsId == null);
		System.assert(objValue.shipmentMethodId == null);
		System.assert(objValue.paymentMethodId == null);
		System.assert(objValue.blocked == null);
		System.assert(objValue.lastModifiedDateTime == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Customers objGetCustomers = new Customers(System.JSON.createParser(json));
		System.assert(objGetCustomers != null);
		System.assert(objGetCustomers.odata_context == null);
		System.assert(objGetCustomers.value == null);
	}

    // Generated by JSON2Apex http://json2apex.herokuapp.com/
    // This test method should give 100% coverage
	static testMethod void testParseItems() {
		String json = '{\"@odata.context\":\"https://api.businesscentral.dynamics.com/v2.0/862c2ab7-4751-4c34-bc37-13deffb5515d/Sandbox1/api/v2.0/$metadata#items\",\"value\":[{\"@odata.etag\":\"W/\\\"JzQ0O1FRWWlzSk83ZDlTVDd1KzVodEFMZEQvTEVMTllTUU45YXljRm00aVlWUVU9MTswMDsn\\\"\",\"id\":\"b1f83a78-3ac8-eb11-9f0a-000d3ae8dd48\",\"number\":\"1001\",\"displayName\":\"Poles\",\"type\":\"Inventory\",\"itemCategoryId\":\"00000000-0000-0000-0000-000000000000\",\"itemCategoryCode\":\"\",\"blocked\":false,\"gtin\":\"\",\"inventory\":0,\"unitPrice\":0,\"priceIncludesTax\":false,\"unitCost\":0,\"taxGroupId\":\"2a242249-13a8-eb11-bb60-000d3a2b96dd\",\"taxGroupCode\":\"TAXABLE\",\"baseUnitOfMeasureId\":\"a9232249-13a8-eb11-bb60-000d3a2b96dd\",\"baseUnitOfMeasureCode\":\"PCS\",\"lastModifiedDateTime\":\"2021-06-08T09:19:38.29Z\"},{\"@odata.etag\":\"W/\\\"JzQ0OytMcUo3UVAzOWNMM2NVMGQrbFdKZjhUZWwrdnEwN3JpMEdOdkpqbDdOM1k9MTswMDsn\\\"\",\"id\":\"eb616ea7-3ac8-eb11-9f0a-000d3ae8dd48\",\"number\":\"1002\",\"displayName\":\"Benches\",\"type\":\"Inventory\",\"itemCategoryId\":\"00000000-0000-0000-0000-000000000000\",\"itemCategoryCode\":\"\",\"blocked\":false,\"gtin\":\"\",\"inventory\":0,\"unitPrice\":0,\"priceIncludesTax\":false,\"unitCost\":0,\"taxGroupId\":\"2a242249-13a8-eb11-bb60-000d3a2b96dd\",\"taxGroupCode\":\"TAXABLE\",\"baseUnitOfMeasureId\":\"a9232249-13a8-eb11-bb60-000d3a2b96dd\",\"baseUnitOfMeasureCode\":\"PCS\",\"lastModifiedDateTime\":\"2021-06-08T09:19:49.333Z\"},{\"@odata.etag\":\"W/\\\"JzQ0O0lTazYxVXFDdW80dkRodDNmNjg3N0xXQVZYNk8yQU1nNlN4cS9NT2QyV0k9MTswMDsn\\\"\",\"id\":\"f1616ea7-3ac8-eb11-9f0a-000d3ae8dd48\",\"number\":\"1003\",\"displayName\":\"Lights\",\"type\":\"Inventory\",\"itemCategoryId\":\"00000000-0000-0000-0000-000000000000\",\"itemCategoryCode\":\"\",\"blocked\":false,\"gtin\":\"\",\"inventory\":0,\"unitPrice\":0,\"priceIncludesTax\":false,\"unitCost\":0,\"taxGroupId\":\"2a242249-13a8-eb11-bb60-000d3a2b96dd\",\"taxGroupCode\":\"TAXABLE\",\"baseUnitOfMeasureId\":\"a9232249-13a8-eb11-bb60-000d3a2b96dd\",\"baseUnitOfMeasureCode\":\"PCS\",\"lastModifiedDateTime\":\"2021-06-08T09:20:11.53Z\"}]}';
		Items r = Items.parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Items.Value objValue = new Items.Value(System.JSON.createParser(json));
		System.assert(objValue != null);
		System.assert(objValue.odata_etag == null);
		System.assert(objValue.id == null);
		System.assert(objValue.number_Z == null);
		System.assert(objValue.displayName == null);
		System.assert(objValue.type == null);
		System.assert(objValue.itemCategoryId == null);
		System.assert(objValue.itemCategoryCode == null);
		System.assert(objValue.blocked == null);
		System.assert(objValue.gtin == null);
		System.assert(objValue.inventory == null);
		System.assert(objValue.unitPrice == null);
		System.assert(objValue.priceIncludesTax == null);
		System.assert(objValue.unitCost == null);
		System.assert(objValue.taxGroupId == null);
		System.assert(objValue.taxGroupCode == null);
		System.assert(objValue.baseUnitOfMeasureId == null);
		System.assert(objValue.baseUnitOfMeasureCode == null);
		System.assert(objValue.lastModifiedDateTime == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Items objGetItems = new Items(System.JSON.createParser(json));
		System.assert(objGetItems != null);
		System.assert(objGetItems.odata_context == null);
		System.assert(objGetItems.value == null);
	}

    // Generated by JSON2Apex http://json2apex.herokuapp.com/
    // This test method should give 100% coverage
	static testMethod void testParseSalesOrder() {
		String json = '{\"@odata.context\":\"https://api.businesscentral.dynamics.com/v2.0/862c2ab7-4751-4c34-bc37-13deffb5515d/Sandbox1/api/v2.0/$metadata#salesOrders\",\"value\":[{\"@odata.etag\":\"W/\\\"JzQ0O0tOOW93ZnNrb2E3VnlqS2NReDA1OTVUeVBCajdmRlVMTWNJdXo4Zm45UUk9MTswMDsn\\\"\",\"id\":\"13cc0239-3bc8-eb11-9f0a-000d3ae8dd48\",\"number\":\"S-ORD101001\",\"externalDocumentNumber\":\"\",\"orderDate\":\"2021-06-08\",\"postingDate\":\"2021-06-08\",\"customerId\":\"bff25d07-36c8-eb11-9f0a-000d3ae8dd48\",\"customerNumber\":\"C00010\",\"customerName\":\"Test customer 1\",\"billToName\":\"Test customer 1\",\"billToCustomerId\":\"bff25d07-36c8-eb11-9f0a-000d3ae8dd48\",\"billToCustomerNumber\":\"C00010\",\"shipToName\":\"Test customer 1\",\"shipToContact\":\"\",\"sellToAddressLine1\":\"\",\"sellToAddressLine2\":\"\",\"sellToCity\":\"\",\"sellToCountry\":\"\",\"sellToState\":\"\",\"sellToPostCode\":\"\",\"billToAddressLine1\":\"\",\"billToAddressLine2\":\"\",\"billToCity\":\"\",\"billToCountry\":\"\",\"billToState\":\"\",\"billToPostCode\":\"\",\"shipToAddressLine1\":\"\",\"shipToAddressLine2\":\"\",\"shipToCity\":\"\",\"shipToCountry\":\"\",\"shipToState\":\"\",\"shipToPostCode\":\"\",\"currencyId\":\"00000000-0000-0000-0000-000000000000\",\"currencyCode\":\"CAD\",\"pricesIncludeTax\":false,\"paymentTermsId\":\"18222249-13a8-eb11-bb60-000d3a2b96dd\",\"shipmentMethodId\":\"00000000-0000-0000-0000-000000000000\",\"salesperson\":\"\",\"partialShipping\":true,\"requestedDeliveryDate\":\"0001-01-01\",\"discountAmount\":0,\"discountAppliedBeforeTax\":true,\"totalAmountExcludingTax\":750,\"totalTaxAmount\":0,\"totalAmountIncludingTax\":750,\"fullyShipped\":true,\"status\":\"Draft\",\"lastModifiedDateTime\":\"2021-06-08T10:10:46.32Z\",\"phoneNumber\":\"\",\"email\":\"\"}]}';
		SalesOrder r = SalesOrder.parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		SalesOrder objGetSalesOrder = new SalesOrder(System.JSON.createParser(json));
		System.assert(objGetSalesOrder != null);
		System.assert(objGetSalesOrder.odata_context == null);
		System.assert(objGetSalesOrder.value == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		SalesOrder.Value objValue = new SalesOrder.Value(System.JSON.createParser(json));
		System.assert(objValue != null);
		System.assert(objValue.odata_etag == null);
		System.assert(objValue.id == null);
		System.assert(objValue.number_Z == null);
		System.assert(objValue.externalDocumentNumber == null);
		System.assert(objValue.orderDate == null);
		System.assert(objValue.postingDate == null);
		System.assert(objValue.customerId == null);
		System.assert(objValue.customerNumber == null);
		System.assert(objValue.customerName == null);
		System.assert(objValue.billToName == null);
		System.assert(objValue.billToCustomerId == null);
		System.assert(objValue.billToCustomerNumber == null);
		System.assert(objValue.shipToName == null);
		System.assert(objValue.shipToContact == null);
		System.assert(objValue.sellToAddressLine1 == null);
		System.assert(objValue.sellToAddressLine2 == null);
		System.assert(objValue.sellToCity == null);
		System.assert(objValue.sellToCountry == null);
		System.assert(objValue.sellToState == null);
		System.assert(objValue.sellToPostCode == null);
		System.assert(objValue.billToAddressLine1 == null);
		System.assert(objValue.billToAddressLine2 == null);
		System.assert(objValue.billToCity == null);
		System.assert(objValue.billToCountry == null);
		System.assert(objValue.billToState == null);
		System.assert(objValue.billToPostCode == null);
		System.assert(objValue.shipToAddressLine1 == null);
		System.assert(objValue.shipToAddressLine2 == null);
		System.assert(objValue.shipToCity == null);
		System.assert(objValue.shipToCountry == null);
		System.assert(objValue.shipToState == null);
		System.assert(objValue.shipToPostCode == null);
		System.assert(objValue.currencyId == null);
		System.assert(objValue.currencyCode == null);
		System.assert(objValue.pricesIncludeTax == null);
		System.assert(objValue.paymentTermsId == null);
		System.assert(objValue.shipmentMethodId == null);
		System.assert(objValue.salesperson == null);
		System.assert(objValue.partialShipping == null);
		System.assert(objValue.requestedDeliveryDate == null);
		System.assert(objValue.discountAmount == null);
		System.assert(objValue.discountAppliedBeforeTax == null);
		System.assert(objValue.totalAmountExcludingTax == null);
		System.assert(objValue.totalTaxAmount == null);
		System.assert(objValue.totalAmountIncludingTax == null);
		System.assert(objValue.fullyShipped == null);
		System.assert(objValue.status == null);
		System.assert(objValue.lastModifiedDateTime == null);
		System.assert(objValue.phoneNumber == null);
		System.assert(objValue.email == null);
	}
    
    // Generated by JSON2Apex http://json2apex.herokuapp.com/
    // This test method should give 100% coverage
	static testMethod void testParseOrderLines() {
		String json = '{\"@odata.context\":\"https://api.businesscentral.dynamics.com/v2.0/862c2ab7-4751-4c34-bc37-13deffb5515d/Sandbox1/api/v2.0/$metadata#salesOrders(13cc0239-3bc8-eb11-9f0a-000d3ae8dd48)/salesOrderLines\",\"value\":[{\"@odata.etag\":\"W/\\\"JzQ0O0Z5ekNVOUFmcjI1SXJKUmpmY2lKcWpHMmZyMWEyNVdqTStXUm5JZDQzeDg9MTswMDsn\\\"\",\"id\":\"acc5e151-3bc8-eb11-9f0a-000d3ae8dd48\",\"documentId\":\"13cc0239-3bc8-eb11-9f0a-000d3ae8dd48\",\"sequence\":20000,\"itemId\":\"b1f83a78-3ac8-eb11-9f0a-000d3ae8dd48\",\"accountId\":\"00000000-0000-0000-0000-000000000000\",\"lineType\":\"Item\",\"lineObjectNumber\":\"1001\",\"description\":\"Poles\",\"unitOfMeasureId\":\"a9232249-13a8-eb11-bb60-000d3a2b96dd\",\"unitOfMeasureCode\":\"PCS\",\"quantity\":5,\"unitPrice\":100,\"discountAmount\":0,\"discountPercent\":0,\"discountAppliedBeforeTax\":false,\"amountExcludingTax\":500,\"taxCode\":\"NONTAXABLE\",\"taxPercent\":0,\"totalTaxAmount\":0,\"amountIncludingTax\":500.00,\"invoiceDiscountAllocation\":0,\"netAmount\":500,\"netTaxAmount\":0,\"netAmountIncludingTax\":500,\"shipmentDate\":\"2021-06-08\",\"shippedQuantity\":0,\"invoicedQuantity\":0,\"invoiceQuantity\":5,\"shipQuantity\":5,\"itemVariantId\":\"00000000-0000-0000-0000-000000000000\",\"locationId\":\"00000000-0000-0000-0000-000000000000\"},{\"@odata.etag\":\"W/\\\"JzQ0O25lSW9XdlNiWWU5U3ZOS2ZRakM1MnYvNDBiV3JQS0tjQkVvdUNNUWNKa0U9MTswMDsn\\\"\",\"id\":\"adc5e151-3bc8-eb11-9f0a-000d3ae8dd48\",\"documentId\":\"13cc0239-3bc8-eb11-9f0a-000d3ae8dd48\",\"sequence\":10000,\"itemId\":\"00000000-0000-0000-0000-000000000000\",\"accountId\":\"00000000-0000-0000-0000-000000000000\",\"lineType\":\"Comment\",\"lineObjectNumber\":\"\",\"description\":\"Test Comment\",\"unitOfMeasureId\":\"00000000-0000-0000-0000-000000000000\",\"unitOfMeasureCode\":\"\",\"quantity\":0,\"unitPrice\":0,\"discountAmount\":0,\"discountPercent\":0,\"discountAppliedBeforeTax\":false,\"amountExcludingTax\":0,\"taxCode\":\"\",\"taxPercent\":0,\"totalTaxAmount\":0,\"amountIncludingTax\":0,\"invoiceDiscountAllocation\":0,\"netAmount\":0,\"netTaxAmount\":0,\"netAmountIncludingTax\":0,\"shipmentDate\":\"0001-01-01\",\"shippedQuantity\":0,\"invoicedQuantity\":0,\"invoiceQuantity\":0,\"shipQuantity\":0,\"itemVariantId\":\"00000000-0000-0000-0000-000000000000\",\"locationId\":\"00000000-0000-0000-0000-000000000000\"},{\"@odata.etag\":\"W/\\\"JzQ0O0JLZ25jTkExeXh4ek5hNVNMUXg2RlNlM0ZuWW1NRVlCZnpXOUNmQ2VYaDA9MTswMDsn\\\"\",\"id\":\"02bec2b4-3bc8-eb11-9f0a-000d3ae8dd48\",\"documentId\":\"13cc0239-3bc8-eb11-9f0a-000d3ae8dd48\",\"sequence\":30000,\"itemId\":\"f1616ea7-3ac8-eb11-9f0a-000d3ae8dd48\",\"accountId\":\"00000000-0000-0000-0000-000000000000\",\"lineType\":\"Item\",\"lineObjectNumber\":\"1003\",\"description\":\"Lights\",\"unitOfMeasureId\":\"a9232249-13a8-eb11-bb60-000d3a2b96dd\",\"unitOfMeasureCode\":\"PCS\",\"quantity\":50,\"unitPrice\":5,\"discountAmount\":0,\"discountPercent\":0,\"discountAppliedBeforeTax\":false,\"amountExcludingTax\":250,\"taxCode\":\"NONTAXABLE\",\"taxPercent\":0,\"totalTaxAmount\":0,\"amountIncludingTax\":250.00,\"invoiceDiscountAllocation\":0,\"netAmount\":250,\"netTaxAmount\":0,\"netAmountIncludingTax\":250,\"shipmentDate\":\"2021-06-08\",\"shippedQuantity\":0,\"invoicedQuantity\":0,\"invoiceQuantity\":50,\"shipQuantity\":50,\"itemVariantId\":\"00000000-0000-0000-0000-000000000000\",\"locationId\":\"00000000-0000-0000-0000-000000000000\"}]}';
		OrderLines r = OrderLines.parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		OrderLines objGetOrderLines = new OrderLines(System.JSON.createParser(json));
		System.assert(objGetOrderLines != null);
		System.assert(objGetOrderLines.odata_context == null);
		System.assert(objGetOrderLines.value == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		OrderLines.Value objValue = new OrderLines.Value(System.JSON.createParser(json));
		System.assert(objValue != null);
		System.assert(objValue.odata_etag == null);
		System.assert(objValue.id == null);
		System.assert(objValue.documentId == null);
		System.assert(objValue.sequence == null);
		System.assert(objValue.itemId == null);
		System.assert(objValue.accountId == null);
		System.assert(objValue.lineType == null);
		System.assert(objValue.lineObjectNumber == null);
		System.assert(objValue.description == null);
		System.assert(objValue.unitOfMeasureId == null);
		System.assert(objValue.unitOfMeasureCode == null);
		System.assert(objValue.quantity == null);
		System.assert(objValue.unitPrice == null);
		System.assert(objValue.discountAmount == null);
		System.assert(objValue.discountPercent == null);
		System.assert(objValue.discountAppliedBeforeTax == null);
		System.assert(objValue.amountExcludingTax == null);
		System.assert(objValue.taxCode == null);
		System.assert(objValue.taxPercent == null);
		System.assert(objValue.totalTaxAmount == null);
		System.assert(objValue.amountIncludingTax == null);
		System.assert(objValue.invoiceDiscountAllocation == null);
		System.assert(objValue.netAmount == null);
		System.assert(objValue.netTaxAmount == null);
		System.assert(objValue.netAmountIncludingTax == null);
		System.assert(objValue.shipmentDate == null);
		System.assert(objValue.shippedQuantity == null);
		System.assert(objValue.invoicedQuantity == null);
		System.assert(objValue.invoiceQuantity == null);
		System.assert(objValue.shipQuantity == null);
		System.assert(objValue.itemVariantId == null);
		System.assert(objValue.locationId == null);
	}
    
	// Generated by JSON2Apex http://json2apex.herokuapp.com/
	// This test method should give 100% coverage
	static testMethod void testParseSalesInvoice() {
		String json = '{'+
		'    \"@odata.context\": \"https://api.businesscentral.dynamics.com/v1.0/8dd65afe-0467-41c9-aca7-542d293d0413/api/v2.0/$metadata#salesInvoices\",'+
		'    \"value\": ['+
		'        {'+
		'            \"@odata.etag\": \"W/\\\"JzQ0O0hCYVpNZXpQc2dCZTNqZndnSk1ScFFNbXpYOE5MTXFjRHdnMk9RVlVDcXM9MTswMDsn\\\"\",'+
		'            \"id\": \"d1a278e4-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"number\": \"PS-INV103198\",'+
		'            \"externalDocumentNumber\": \"\",'+
		'            \"invoiceDate\": \"2021-04-01\",'+
		'            \"postingDate\": \"2021-04-01\",'+
		'            \"dueDate\": \"2021-04-30\",'+
		'            \"customerPurchaseOrderReference\": \"\",'+
		'            \"customerId\": \"87bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"customerNumber\": \"30000\",'+
		'            \"customerName\": \"School of Fine Art\",'+
		'            \"billToName\": \"School of Fine Art\",'+
		'            \"billToCustomerId\": \"87bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"billToCustomerNumber\": \"30000\",'+
		'            \"shipToName\": \"School of Fine Art\",'+
		'            \"shipToContact\": \"Meagan Bond\",'+
		'            \"sellToAddressLine1\": \"100 Queen Street, Suite 500\",'+
		'            \"sellToAddressLine2\": \"\",'+
		'            \"sellToCity\": \"Ottawa\",'+
		'            \"sellToCountry\": \"CA\",'+
		'            \"sellToState\": \"ON\",'+
		'            \"sellToPostCode\": \"K1P 1J9\",'+
		'            \"billToAddressLine1\": \"100 Queen Street, Suite 500\",'+
		'            \"billToAddressLine2\": \"\",'+
		'            \"billToCity\": \"Ottawa\",'+
		'            \"billToCountry\": \"CA\",'+
		'            \"billToState\": \"ON\",'+
		'            \"billToPostCode\": \"K1P 1J9\",'+
		'            \"shipToAddressLine1\": \"100 Queen Street, Suite 500\",'+
		'            \"shipToAddressLine2\": \"\",'+
		'            \"shipToCity\": \"Ottawa\",'+
		'            \"shipToCountry\": \"CA\",'+
		'            \"shipToState\": \"ON\",'+
		'            \"shipToPostCode\": \"K1P 1J9\",'+
		'            \"currencyId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"currencyCode\": \"CAD\",'+
		'            \"orderId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"orderNumber\": \"\",'+
		'            \"paymentTermsId\": \"f1bb86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"shipmentMethodId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"salesperson\": \"JO\",'+
		'            \"pricesIncludeTax\": false,'+
		'            \"remainingAmount\": 0,'+
		'            \"discountAmount\": 0,'+
		'            \"discountAppliedBeforeTax\": true,'+
		'            \"totalAmountExcludingTax\": 2863.2,'+
		'            \"totalTaxAmount\": 372.22,'+
		'            \"totalAmountIncludingTax\": 3235.42,'+
		'            \"status\": \"Canceled\",'+
		'            \"lastModifiedDateTime\": \"2021-10-11T15:53:26.487Z\",'+
		'            \"phoneNumber\": \"\",'+
		'            \"email\": \"meagan.bond@contoso.com\"'+
		'        },'+
		'        {'+
		'            \"@odata.etag\": \"W/\\\"JzQ0O2dKVk1tRENSRWZBNG5XZFdxcUc1Y0xjbzlHY3dBRnQyQTkwckdxKzFlbTg9MTswMDsn\\\"\",'+
		'            \"id\": \"d3a278e4-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"number\": \"PS-INV103215\",'+
		'            \"externalDocumentNumber\": \"\",'+
		'            \"invoiceDate\": \"2021-04-04\",'+
		'            \"postingDate\": \"2021-04-04\",'+
		'            \"dueDate\": \"2021-05-04\",'+
		'            \"customerPurchaseOrderReference\": \"OPEN\",'+
		'            \"customerId\": \"85bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"customerNumber\": \"10000\",'+
		'            \"customerName\": \"Adatum Corporation\",'+
		'            \"billToName\": \"Adatum Corporation\",'+
		'            \"billToCustomerId\": \"85bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"billToCustomerNumber\": \"10000\",'+
		'            \"shipToName\": \"Adatum Corporation\",'+
		'            \"shipToContact\": \"Robert Townes\",'+
		'            \"sellToAddressLine1\": \"360 Main Street, Suite 1150\",'+
		'            \"sellToAddressLine2\": \"\",'+
		'            \"sellToCity\": \"Winnipeg\",'+
		'            \"sellToCountry\": \"CA\",'+
		'            \"sellToState\": \"MB\",'+
		'            \"sellToPostCode\": \"R3C 3Z3\",'+
		'            \"billToAddressLine1\": \"360 Main Street, Suite 1150\",'+
		'            \"billToAddressLine2\": \"\",'+
		'            \"billToCity\": \"Winnipeg\",'+
		'            \"billToCountry\": \"CA\",'+
		'            \"billToState\": \"MB\",'+
		'            \"billToPostCode\": \"R3C 3Z3\",'+
		'            \"shipToAddressLine1\": \"360 Main Street, Suite 1150\",'+
		'            \"shipToAddressLine2\": \"\",'+
		'            \"shipToCity\": \"Winnipeg\",'+
		'            \"shipToCountry\": \"CA\",'+
		'            \"shipToState\": \"MB\",'+
		'            \"shipToPostCode\": \"R3C 3Z3\",'+
		'            \"currencyId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"currencyCode\": \"CAD\",'+
		'            \"orderId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"orderNumber\": \"\",'+
		'            \"paymentTermsId\": \"ebbb86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"shipmentMethodId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"salesperson\": \"JO\",'+
		'            \"pricesIncludeTax\": false,'+
		'            \"remainingAmount\": 0,'+
		'            \"discountAmount\": 0,'+
		'            \"discountAppliedBeforeTax\": true,'+
		'            \"totalAmountExcludingTax\": 14022.1,'+
		'            \"totalTaxAmount\": 1822.88,'+
		'            \"totalAmountIncludingTax\": 15844.98,'+
		'            \"status\": \"Canceled\",'+
		'            \"lastModifiedDateTime\": \"2021-10-11T15:53:07.457Z\",'+
		'            \"phoneNumber\": \"\",'+
		'            \"email\": \"robert.townes@contoso.com\"'+
		'        },'+
		'        {'+
		'            \"@odata.etag\": \"W/\\\"JzQ0O1NZdW9VK09DcmdWcnZJVFpYQ3lkd0RSVWJPc3Vyb0lHR3NEbVhXQ1RGeDA9MTswMDsn\\\"\",'+
		'            \"id\": \"d5a278e4-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"number\": \"S-INV102200\",'+
		'            \"externalDocumentNumber\": \"\",'+
		'            \"invoiceDate\": \"2021-05-01\",'+
		'            \"postingDate\": \"2021-05-01\",'+
		'            \"dueDate\": \"2021-06-01\",'+
		'            \"customerPurchaseOrderReference\": \"OPEN\",'+
		'            \"customerId\": \"85bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"customerNumber\": \"10000\",'+
		'            \"customerName\": \"Adatum Corporation\",'+
		'            \"billToName\": \"Adatum Corporation\",'+
		'            \"billToCustomerId\": \"85bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"billToCustomerNumber\": \"10000\",'+
		'            \"shipToName\": \"Adatum Corporation\",'+
		'            \"shipToContact\": \"Robert Townes\",'+
		'            \"sellToAddressLine1\": \"360 Main Street, Suite 1150\",'+
		'            \"sellToAddressLine2\": \"\",'+
		'            \"sellToCity\": \"Winnipeg\",'+
		'            \"sellToCountry\": \"CA\",'+
		'            \"sellToState\": \"MB\",'+
		'            \"sellToPostCode\": \"R3C 3Z3\",'+
		'            \"billToAddressLine1\": \"360 Main Street, Suite 1150\",'+
		'            \"billToAddressLine2\": \"\",'+
		'            \"billToCity\": \"Winnipeg\",'+
		'            \"billToCountry\": \"CA\",'+
		'            \"billToState\": \"MB\",'+
		'            \"billToPostCode\": \"R3C 3Z3\",'+
		'            \"shipToAddressLine1\": \"360 Main Street, Suite 1150\",'+
		'            \"shipToAddressLine2\": \"\",'+
		'            \"shipToCity\": \"Winnipeg\",'+
		'            \"shipToCountry\": \"CA\",'+
		'            \"shipToState\": \"MB\",'+
		'            \"shipToPostCode\": \"R3C 3Z3\",'+
		'            \"currencyId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"currencyCode\": \"CAD\",'+
		'            \"orderId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"orderNumber\": \"\",'+
		'            \"paymentTermsId\": \"ebbb86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"shipmentMethodId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"salesperson\": \"JO\",'+
		'            \"pricesIncludeTax\": false,'+
		'            \"remainingAmount\": 12505.15,'+
		'            \"discountAmount\": 0,'+
		'            \"discountAppliedBeforeTax\": true,'+
		'            \"totalAmountExcludingTax\": 11066.5,'+
		'            \"totalTaxAmount\": 1438.65,'+
		'            \"totalAmountIncludingTax\": 12505.15,'+
		'            \"status\": \"Draft\",'+
		'            \"lastModifiedDateTime\": \"2021-08-26T13:23:02.823Z\",'+
		'            \"phoneNumber\": \"\",'+
		'            \"email\": \"robert.townes@contoso.com\"'+
		'        },'+
		'        {'+
		'            \"@odata.etag\": \"W/\\\"JzQ0OzllQ3NyV3RxbGRFQlNXNHo2dlp3bWZNOHNFZVJrUnRISHJEd2Fwd0dUeHM9MTswMDsn\\\"\",'+
		'            \"id\": \"d7a278e4-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"number\": \"S-INV102201\",'+
		'            \"externalDocumentNumber\": \"\",'+
		'            \"invoiceDate\": \"2021-04-03\",'+
		'            \"postingDate\": \"2021-04-03\",'+
		'            \"dueDate\": \"2021-04-17\",'+
		'            \"customerPurchaseOrderReference\": \"OPEN\",'+
		'            \"customerId\": \"86bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"customerNumber\": \"20000\",'+
		'            \"customerName\": \"Trey Research\",'+
		'            \"billToName\": \"Trey Research\",'+
		'            \"billToCustomerId\": \"86bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"billToCustomerNumber\": \"20000\",'+
		'            \"shipToName\": \"Trey Research\",'+
		'            \"shipToContact\": \"Helen Ray\",'+
		'            \"sellToAddressLine1\": \"1950 Meadowvale Blvd.\",'+
		'            \"sellToAddressLine2\": \"\",'+
		'            \"sellToCity\": \"Missisauga\",'+
		'            \"sellToCountry\": \"CA\",'+
		'            \"sellToState\": \"ON\",'+
		'            \"sellToPostCode\": \"L5N 8L9\",'+
		'            \"billToAddressLine1\": \"1950 Meadowvale Blvd.\",'+
		'            \"billToAddressLine2\": \"\",'+
		'            \"billToCity\": \"Missisauga\",'+
		'            \"billToCountry\": \"CA\",'+
		'            \"billToState\": \"ON\",'+
		'            \"billToPostCode\": \"L5N 8L9\",'+
		'            \"shipToAddressLine1\": \"1950 Meadowvale Blvd.\",'+
		'            \"shipToAddressLine2\": \"\",'+
		'            \"shipToCity\": \"Missisauga\",'+
		'            \"shipToCountry\": \"CA\",'+
		'            \"shipToState\": \"ON\",'+
		'            \"shipToPostCode\": \"L5N 8L9\",'+
		'            \"currencyId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"currencyCode\": \"CAD\",'+
		'            \"orderId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"orderNumber\": \"\",'+
		'            \"paymentTermsId\": \"e9bb86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"shipmentMethodId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"salesperson\": \"JO\",'+
		'            \"pricesIncludeTax\": false,'+
		'            \"remainingAmount\": 2794.94,'+
		'            \"discountAmount\": 0,'+
		'            \"discountAppliedBeforeTax\": true,'+
		'            \"totalAmountExcludingTax\": 2473.4,'+
		'            \"totalTaxAmount\": 321.54,'+
		'            \"totalAmountIncludingTax\": 2794.94,'+
		'            \"status\": \"Draft\",'+
		'            \"lastModifiedDateTime\": \"2021-08-26T13:23:02.857Z\",'+
		'            \"phoneNumber\": \"\",'+
		'            \"email\": \"helen.ray@contoso.com\"'+
		'        }'+
		'    ]'+
		'}';
		SalesInvoice r = SalesInvoice.parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		SalesInvoice objSalesInvoice = new SalesInvoice(System.JSON.createParser(json));
		System.assert(objSalesInvoice != null);
		System.assert(objSalesInvoice.odata_context == null);
		System.assert(objSalesInvoice.value == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		SalesInvoice.Value objValue = new SalesInvoice.Value(System.JSON.createParser(json));
		System.assert(objValue != null);
		System.assert(objValue.odata_etag == null);
		System.assert(objValue.id == null);
		System.assert(objValue.number_Z == null);
		System.assert(objValue.externalDocumentNumber == null);
		System.assert(objValue.invoiceDate == null);
		System.assert(objValue.postingDate == null);
		System.assert(objValue.dueDate == null);
		System.assert(objValue.customerPurchaseOrderReference == null);
		System.assert(objValue.customerId == null);
		System.assert(objValue.customerNumber == null);
		System.assert(objValue.customerName == null);
		System.assert(objValue.billToName == null);
		System.assert(objValue.billToCustomerId == null);
		System.assert(objValue.billToCustomerNumber == null);
		System.assert(objValue.shipToName == null);
		System.assert(objValue.shipToContact == null);
		System.assert(objValue.sellToAddressLine1 == null);
		System.assert(objValue.sellToAddressLine2 == null);
		System.assert(objValue.sellToCity == null);
		System.assert(objValue.sellToCountry == null);
		System.assert(objValue.sellToState == null);
		System.assert(objValue.sellToPostCode == null);
		System.assert(objValue.billToAddressLine1 == null);
		System.assert(objValue.billToAddressLine2 == null);
		System.assert(objValue.billToCity == null);
		System.assert(objValue.billToCountry == null);
		System.assert(objValue.billToState == null);
		System.assert(objValue.billToPostCode == null);
		System.assert(objValue.shipToAddressLine1 == null);
		System.assert(objValue.shipToAddressLine2 == null);
		System.assert(objValue.shipToCity == null);
		System.assert(objValue.shipToCountry == null);
		System.assert(objValue.shipToState == null);
		System.assert(objValue.shipToPostCode == null);
		System.assert(objValue.currencyId == null);
		System.assert(objValue.currencyCode == null);
		System.assert(objValue.orderId == null);
		System.assert(objValue.orderNumber == null);
		System.assert(objValue.paymentTermsId == null);
		System.assert(objValue.shipmentMethodId == null);
		System.assert(objValue.salesperson == null);
		System.assert(objValue.pricesIncludeTax == null);
		System.assert(objValue.remainingAmount == null);
		System.assert(objValue.discountAmount == null);
		System.assert(objValue.discountAppliedBeforeTax == null);
		System.assert(objValue.totalAmountExcludingTax == null);
		System.assert(objValue.totalTaxAmount == null);
		System.assert(objValue.totalAmountIncludingTax == null);
		System.assert(objValue.status == null);
		System.assert(objValue.lastModifiedDateTime == null);
		System.assert(objValue.phoneNumber == null);
		System.assert(objValue.email == null);
	}
    
    // Generated by JSON2Apex http://json2apex.herokuapp.com/
    // This test method should give 100% coverage
	static testMethod void testParseInvoiceLines() {
		String json = '{'+
		'    \"@odata.context\": \"https://api.businesscentral.dynamics.com/v1.0/8dd65afe-0467-41c9-aca7-542d293d0413/api/v2.0/$metadata#salesInvoices(d3a278e4-fbd7-eb11-bb70-000d3a2694d7)/salesInvoiceLines\",'+
		'    \"value\": ['+
		'        {'+
		'            \"@odata.etag\": \"W/\\\"JzQ0O1JPWndLQWhaamljTFJ5azVnM1IwMkY1R2xtTTAvZVcrREJNVjJhMGxmUWc9MTswMDsn\\\"\",'+
		'            \"id\": \"24d91e02-fcd7-eb11-bb70-000d3a2694d7\",'+
		'            \"documentId\": \"d3a278e4-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"sequence\": 10000,'+
		'            \"itemId\": \"9cbd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"accountId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"lineType\": \"Item\",'+
		'            \"lineObjectNumber\": \"1968-S\",'+
		'            \"description\": \"MEXICO Swivel Chair, black\",'+
		'            \"unitOfMeasureId\": \"f3bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"unitOfMeasureCode\": \"PCS\",'+
		'            \"unitPrice\": 285.5,'+
		'            \"quantity\": 5,'+
		'            \"discountAmount\": 0,'+
		'            \"discountPercent\": 0,'+
		'            \"discountAppliedBeforeTax\": false,'+
		'            \"amountExcludingTax\": 1427.5,'+
		'            \"taxCode\": \"TAXABLE\",'+
		'            \"taxPercent\": 13,'+
		'            \"totalTaxAmount\": 185.58,'+
		'            \"amountIncludingTax\": 1613.08,'+
		'            \"invoiceDiscountAllocation\": 0,'+
		'            \"netAmount\": 1427.5,'+
		'            \"netTaxAmount\": 185.58,'+
		'            \"netAmountIncludingTax\": 1613.08,'+
		'            \"shipmentDate\": \"2021-06-28\",'+
		'            \"itemVariantId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"locationId\": \"00000000-0000-0000-0000-000000000000\"'+
		'        },'+
		'        {'+
		'            \"@odata.etag\": \"W/\\\"JzQ0O25pZ2NaUlVteW9lQjdEWGNSb3oxTk1OdnJkb1Zab1ZnTnF4ZWhrN29ZVWs9MTswMDsn\\\"\",'+
		'            \"id\": \"25d91e02-fcd7-eb11-bb70-000d3a2694d7\",'+
		'            \"documentId\": \"d3a278e4-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"sequence\": 20000,'+
		'            \"itemId\": \"a1bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"accountId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"lineType\": \"Item\",'+
		'            \"lineObjectNumber\": \"1996-S\",'+
		'            \"description\": \"ATLANTA Whiteboard, base\",'+
		'            \"unitOfMeasureId\": \"f3bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"unitOfMeasureCode\": \"PCS\",'+
		'            \"unitPrice\": 2099.1,'+
		'            \"quantity\": 6,'+
		'            \"discountAmount\": 0,'+
		'            \"discountPercent\": 0,'+
		'            \"discountAppliedBeforeTax\": false,'+
		'            \"amountExcludingTax\": 12594.6,'+
		'            \"taxCode\": \"TAXABLE\",'+
		'            \"taxPercent\": 13,'+
		'            \"totalTaxAmount\": 1637.30,'+
		'            \"amountIncludingTax\": 14231.90,'+
		'            \"invoiceDiscountAllocation\": 0,'+
		'            \"netAmount\": 12594.6,'+
		'            \"netTaxAmount\": 1637.3,'+
		'            \"netAmountIncludingTax\": 14231.9,'+
		'            \"shipmentDate\": \"2021-06-28\",'+
		'            \"itemVariantId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"locationId\": \"00000000-0000-0000-0000-000000000000\"'+
		'        },'+
		'        {'+
		'            \"@odata.etag\": \"W/\\\"JzQ0OzZ6YlE0elN6NGQzQTkzd3p3UGRGTTk3SmtUZDV6dUU0cTk4UnVENC8wRms9MTswMDsn\\\"\",'+
		'            \"id\": \"26d91e02-fcd7-eb11-bb70-000d3a2694d7\",'+
		'            \"documentId\": \"d3a278e4-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"sequence\": 30000,'+
		'            \"itemId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"accountId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"lineType\": \"Comment\",'+
		'            \"lineObjectNumber\": \"\",'+
		'            \"description\": \"Thank you for ordering\",'+
		'            \"unitOfMeasureId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"unitOfMeasureCode\": \"\",'+
		'            \"unitPrice\": 0,'+
		'            \"quantity\": 0,'+
		'            \"discountAmount\": 0,'+
		'            \"discountPercent\": 0,'+
		'            \"discountAppliedBeforeTax\": false,'+
		'            \"amountExcludingTax\": 0,'+
		'            \"taxCode\": \"\",'+
		'            \"taxPercent\": 0,'+
		'            \"totalTaxAmount\": 0,'+
		'            \"amountIncludingTax\": 0,'+
		'            \"invoiceDiscountAllocation\": 0,'+
		'            \"netAmount\": 0,'+
		'            \"netTaxAmount\": 0,'+
		'            \"netAmountIncludingTax\": 0,'+
		'            \"shipmentDate\": \"0001-01-01\",'+
		'            \"itemVariantId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"locationId\": \"00000000-0000-0000-0000-000000000000\"'+
		'        }'+
		'    ]'+
		'}';
		InvoiceLines r = InvoiceLines.parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		InvoiceLines objInvoiceLines = new InvoiceLines(System.JSON.createParser(json));
		System.assert(objInvoiceLines != null);
		System.assert(objInvoiceLines.odata_context == null);
		System.assert(objInvoiceLines.value == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		InvoiceLines.Value objValue = new InvoiceLines.Value(System.JSON.createParser(json));
		System.assert(objValue != null);
		System.assert(objValue.odata_etag == null);
		System.assert(objValue.id == null);
		System.assert(objValue.documentId == null);
		System.assert(objValue.sequence == null);
		System.assert(objValue.itemId == null);
		System.assert(objValue.accountId == null);
		System.assert(objValue.lineType == null);
		System.assert(objValue.lineObjectNumber == null);
		System.assert(objValue.description == null);
		System.assert(objValue.unitOfMeasureId == null);
		System.assert(objValue.unitOfMeasureCode == null);
		System.assert(objValue.unitPrice == null);
		System.assert(objValue.quantity == null);
		System.assert(objValue.discountAmount == null);
		System.assert(objValue.discountPercent == null);
		System.assert(objValue.discountAppliedBeforeTax == null);
		System.assert(objValue.amountExcludingTax == null);
		System.assert(objValue.taxCode == null);
		System.assert(objValue.taxPercent == null);
		System.assert(objValue.totalTaxAmount == null);
		System.assert(objValue.amountIncludingTax == null);
		System.assert(objValue.invoiceDiscountAllocation == null);
		System.assert(objValue.netAmount == null);
		System.assert(objValue.netTaxAmount == null);
		System.assert(objValue.netAmountIncludingTax == null);
		System.assert(objValue.shipmentDate == null);
		System.assert(objValue.itemVariantId == null);
		System.assert(objValue.locationId == null);
	}
    
    // Generated by JSON2Apex http://json2apex.herokuapp.com/	
	// This test method should give 100% coverage
	static testMethod void testParseSalesCreditMemo() {
		String json = '{'+
		'    \"@odata.context\": \"https://api.businesscentral.dynamics.com/v1.0/8dd65afe-0467-41c9-aca7-542d293d0413/api/v2.0/$metadata#salesCreditMemos\",'+
		'    \"value\": ['+
		'        {'+
		'            \"@odata.etag\": \"W/\\\"JzQ0O2dGamN1dm9mRVZGK2N5R1hsQ0dJNmRHOTNNMEtGU2xvYUE1ZnA2V2JlS3M9MTswMDsn\\\"\",'+
		'            \"id\": \"c74ffd81-0607-ec11-86bc-000d3ae89616\",'+
		'            \"number\": \"S-CR1001\",'+
		'            \"externalDocumentNumber\": \"\",'+
		'            \"creditMemoDate\": \"2021-04-12\",'+
		'            \"postingDate\": \"2021-04-12\",'+
		'            \"dueDate\": \"2021-04-12\",'+
		'            \"customerId\": \"85bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"customerNumber\": \"10000\",'+
		'            \"customerName\": \"Adatum Corporation\",'+
		'            \"billToName\": \"Adatum Corporation\",'+
		'            \"billToCustomerId\": \"85bd86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"billToCustomerNumber\": \"10000\",'+
		'            \"sellToAddressLine1\": \"360 Main Street, Suite 1150\",'+
		'            \"sellToAddressLine2\": \"\",'+
		'            \"sellToCity\": \"Winnipeg\",'+
		'            \"sellToCountry\": \"CA\",'+
		'            \"sellToState\": \"MB\",'+
		'            \"sellToPostCode\": \"R3C 3Z3\",'+
		'            \"billToAddressLine1\": \"360 Main Street, Suite 1150\",'+
		'            \"billToAddressLine2\": \"\",'+
		'            \"billToCity\": \"Winnipeg\",'+
		'            \"billToCountry\": \"CA\",'+
		'            \"billToState\": \"MB\",'+
		'            \"billToPostCode\": \"R3C 3Z3\",'+
		'            \"currencyId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"currencyCode\": \"CAD\",'+
		'            \"paymentTermsId\": \"ebbb86d2-fbd7-eb11-bb70-000d3a2694d7\",'+
		'            \"shipmentMethodId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"salesperson\": \"JO\",'+
		'            \"pricesIncludeTax\": false,'+
		'            \"discountAmount\": 0,'+
		'            \"discountAppliedBeforeTax\": true,'+
		'            \"totalAmountExcludingTax\": 15034,'+
		'            \"totalTaxAmount\": 1954.42,'+
		'            \"totalAmountIncludingTax\": 16988.42,'+
		'            \"status\": \"Draft\",'+
		'            \"lastModifiedDateTime\": \"2021-08-27T07:17:09.617Z\",'+
		'            \"invoiceId\": \"00000000-0000-0000-0000-000000000000\",'+
		'            \"invoiceNumber\": \"\",'+
		'            \"phoneNumber\": \"\",'+
		'            \"email\": \"robert.townes@contoso.com\",'+
		'            \"customerReturnReasonId\": \"00000000-0000-0000-0000-000000000000\"'+
		'        }'+
		'    ]'+
		'}';
		SalesCreditMemo r = SalesCreditMemo.parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		SalesCreditMemo objSalesCreditMemo = new SalesCreditMemo(System.JSON.createParser(json));
		System.assert(objSalesCreditMemo != null);
		System.assert(objSalesCreditMemo.odata_context == null);
		System.assert(objSalesCreditMemo.value == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		SalesCreditMemo.Value objValue = new SalesCreditMemo.Value(System.JSON.createParser(json));
		System.assert(objValue != null);
		System.assert(objValue.odata_etag == null);
		System.assert(objValue.id == null);
		System.assert(objValue.number_Z == null);
		System.assert(objValue.externalDocumentNumber == null);
		System.assert(objValue.creditMemoDate == null);
		System.assert(objValue.postingDate == null);
		System.assert(objValue.dueDate == null);
		System.assert(objValue.customerId == null);
		System.assert(objValue.customerNumber == null);
		System.assert(objValue.customerName == null);
		System.assert(objValue.billToName == null);
		System.assert(objValue.billToCustomerId == null);
		System.assert(objValue.billToCustomerNumber == null);
		System.assert(objValue.sellToAddressLine1 == null);
		System.assert(objValue.sellToAddressLine2 == null);
		System.assert(objValue.sellToCity == null);
		System.assert(objValue.sellToCountry == null);
		System.assert(objValue.sellToState == null);
		System.assert(objValue.sellToPostCode == null);
		System.assert(objValue.billToAddressLine1 == null);
		System.assert(objValue.billToAddressLine2 == null);
		System.assert(objValue.billToCity == null);
		System.assert(objValue.billToCountry == null);
		System.assert(objValue.billToState == null);
		System.assert(objValue.billToPostCode == null);
		System.assert(objValue.currencyId == null);
		System.assert(objValue.currencyCode == null);
		System.assert(objValue.paymentTermsId == null);
		System.assert(objValue.shipmentMethodId == null);
		System.assert(objValue.salesperson == null);
		System.assert(objValue.pricesIncludeTax == null);
		System.assert(objValue.discountAmount == null);
		System.assert(objValue.discountAppliedBeforeTax == null);
		System.assert(objValue.totalAmountExcludingTax == null);
		System.assert(objValue.totalTaxAmount == null);
		System.assert(objValue.totalAmountIncludingTax == null);
		System.assert(objValue.status == null);
		System.assert(objValue.lastModifiedDateTime == null);
		System.assert(objValue.invoiceId == null);
		System.assert(objValue.invoiceNumber == null);
		System.assert(objValue.phoneNumber == null);
		System.assert(objValue.email == null);
		System.assert(objValue.customerReturnReasonId == null);
	}
    
}