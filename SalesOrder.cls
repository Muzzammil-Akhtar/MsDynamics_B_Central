//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class SalesOrder {

	public String odata_context {get;set;} // in json: @odata.context
	public List<Value> value {get;set;} 

	public SalesOrder(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == '@odata.context') {
						odata_context = parser.getText();
					} else if (text == 'value') {
						value = arrayOfValue(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'SalesOrder consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Value {
		public String odata_etag {get;set;} // in json: @odata.etag
		public String id {get;set;} 
		public String number_Z {get;set;} // in json: number
		public String externalDocumentNumber {get;set;} 
		public String orderDate {get;set;} 
		public String postingDate {get;set;} 
		public String customerId {get;set;} 
		public String customerNumber {get;set;} 
		public String customerName {get;set;} 
		public String billToName {get;set;} 
		public String billToCustomerId {get;set;} 
		public String billToCustomerNumber {get;set;} 
		public String shipToName {get;set;} 
		public String shipToContact {get;set;} 
		public String sellToAddressLine1 {get;set;} 
		public String sellToAddressLine2 {get;set;} 
		public String sellToCity {get;set;} 
		public String sellToCountry {get;set;} 
		public String sellToState {get;set;} 
		public String sellToPostCode {get;set;} 
		public String billToAddressLine1 {get;set;} 
		public String billToAddressLine2 {get;set;} 
		public String billToCity {get;set;} 
		public String billToCountry {get;set;} 
		public String billToState {get;set;} 
		public String billToPostCode {get;set;} 
		public String shipToAddressLine1 {get;set;} 
		public String shipToAddressLine2 {get;set;} 
		public String shipToCity {get;set;} 
		public String shipToCountry {get;set;} 
		public String shipToState {get;set;} 
		public String shipToPostCode {get;set;} 
		public String currencyId {get;set;} 
		public String currencyCode {get;set;} 
		public Boolean pricesIncludeTax {get;set;} 
		public String paymentTermsId {get;set;} 
		public String shipmentMethodId {get;set;} 
		public String salesperson {get;set;} 
		public Boolean partialShipping {get;set;} 
		public String requestedDeliveryDate {get;set;} 
		public Double discountAmount {get;set;} 
		public Boolean discountAppliedBeforeTax {get;set;} 
		public Double totalAmountExcludingTax {get;set;} 
		public Double totalTaxAmount {get;set;} 
		public Double totalAmountIncludingTax {get;set;} 
		public Boolean fullyShipped {get;set;} 
		public String status {get;set;} 
		public String lastModifiedDateTime {get;set;} 
		public String phoneNumber {get;set;} 
		public String email {get;set;} 

		public Value(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '@odata.etag') {
							odata_etag = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'number') {
							number_Z = parser.getText();
						} else if (text == 'externalDocumentNumber') {
							externalDocumentNumber = parser.getText();
						} else if (text == 'orderDate') {
							orderDate = parser.getText();
						} else if (text == 'postingDate') {
							postingDate = parser.getText();
						} else if (text == 'customerId') {
							customerId = parser.getText();
						} else if (text == 'customerNumber') {
							customerNumber = parser.getText();
						} else if (text == 'customerName') {
							customerName = parser.getText();
						} else if (text == 'billToName') {
							billToName = parser.getText();
						} else if (text == 'billToCustomerId') {
							billToCustomerId = parser.getText();
						} else if (text == 'billToCustomerNumber') {
							billToCustomerNumber = parser.getText();
						} else if (text == 'shipToName') {
							shipToName = parser.getText();
						} else if (text == 'shipToContact') {
							shipToContact = parser.getText();
						} else if (text == 'sellToAddressLine1') {
							sellToAddressLine1 = parser.getText();
						} else if (text == 'sellToAddressLine2') {
							sellToAddressLine2 = parser.getText();
						} else if (text == 'sellToCity') {
							sellToCity = parser.getText();
						} else if (text == 'sellToCountry') {
							sellToCountry = parser.getText();
						} else if (text == 'sellToState') {
							sellToState = parser.getText();
						} else if (text == 'sellToPostCode') {
							sellToPostCode = parser.getText();
						} else if (text == 'billToAddressLine1') {
							billToAddressLine1 = parser.getText();
						} else if (text == 'billToAddressLine2') {
							billToAddressLine2 = parser.getText();
						} else if (text == 'billToCity') {
							billToCity = parser.getText();
						} else if (text == 'billToCountry') {
							billToCountry = parser.getText();
						} else if (text == 'billToState') {
							billToState = parser.getText();
						} else if (text == 'billToPostCode') {
							billToPostCode = parser.getText();
						} else if (text == 'shipToAddressLine1') {
							shipToAddressLine1 = parser.getText();
						} else if (text == 'shipToAddressLine2') {
							shipToAddressLine2 = parser.getText();
						} else if (text == 'shipToCity') {
							shipToCity = parser.getText();
						} else if (text == 'shipToCountry') {
							shipToCountry = parser.getText();
						} else if (text == 'shipToState') {
							shipToState = parser.getText();
						} else if (text == 'shipToPostCode') {
							shipToPostCode = parser.getText();
						} else if (text == 'currencyId') {
							currencyId = parser.getText();
						} else if (text == 'currencyCode') {
							currencyCode = parser.getText();
						} else if (text == 'pricesIncludeTax') {
							pricesIncludeTax = parser.getBooleanValue();
						} else if (text == 'paymentTermsId') {
							paymentTermsId = parser.getText();
						} else if (text == 'shipmentMethodId') {
							shipmentMethodId = parser.getText();
						} else if (text == 'salesperson') {
							salesperson = parser.getText();
						} else if (text == 'partialShipping') {
							partialShipping = parser.getBooleanValue();
						} else if (text == 'requestedDeliveryDate') {
							requestedDeliveryDate = parser.getText();
						} else if (text == 'discountAmount') {
							discountAmount = parser.getIntegerValue();
						} else if (text == 'discountAppliedBeforeTax') {
							discountAppliedBeforeTax = parser.getBooleanValue();
						} else if (text == 'totalAmountExcludingTax') {
							totalAmountExcludingTax = parser.getIntegerValue();
						} else if (text == 'totalTaxAmount') {
							totalTaxAmount = parser.getIntegerValue();
						} else if (text == 'totalAmountIncludingTax') {
							totalAmountIncludingTax = parser.getIntegerValue();
						} else if (text == 'fullyShipped') {
							fullyShipped = parser.getBooleanValue();
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'lastModifiedDateTime') {
							lastModifiedDateTime = parser.getText();
						} else if (text == 'phoneNumber') {
							phoneNumber = parser.getText();
						} else if (text == 'email') {
							email = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Value consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static SalesOrder parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new SalesOrder(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<Value> arrayOfValue(System.JSONParser p) {
        List<Value> res = new List<Value>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Value(p));
        }
        return res;
    }

}